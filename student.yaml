openapi: 3.0.3
info:
  title: Onboarding - OpenAPI 3.0
  description: STD22101
  version: 1.0.0
servers:
  - url: https://petstore3.swagger.io/api/v3
    description: GitHub repo for the API
tags:
  - name: student
    description: Everything about students
  - name: teacher
    description: Everything about teachers and courses they teach
paths:
  /student:
    put:
      tags:
        - student
      summary: Update an existing student
      description: Update an existing student using their ID
      operationId: updateStudent
      requestBody:
        description: Update an existing student in the database
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
    post:
      tags:
        - student
      summary: Add a new student
      description: Add a new student to the database
      operationId: addStudent
      requestBody:
        description: Create a new student in the database
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
  /student/{studentId}:
    get:
      tags:
        - student
      summary: Find student by ID
      description: Retrieve information about a single student
      operationId: getStudentById
      parameters:
        - name: studentId
          in: path
          description: ID of the student to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "404":
          description: Student not found
    delete:
      tags:
        - student
      summary: Delete a student
      description: Delete a student from the database
      operationId: deleteStudent
      parameters:
        - name: studentId
          in: path
          description: ID of the student to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
  /teacher:
    post:
      tags:
        - teacher
      summary: Add a new teacher
      description: Add a new teacher to the database
      operationId: addTeacher
      requestBody:
        description: Create a new teacher in the database
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Teacher"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"
  /teacher/{teacherId}:
    get:
      tags:
        - teacher
      summary: Find teacher by ID
      description: Retrieve information about a single teacher
      operationId: getTeacherById
      parameters:
        - name: teacherId
          in: path
          description: ID of the teacher to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"
        "404":
          description: Teacher not found
components:
  schemas:
    Student:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: STD22101
        name:
          type: string
          example: Michel Heather
        age:
          type: integer
          example: 18
        email:
          type: string
          example: hei.michel.8@gmail.com
      required:
        - name
        - age
        - email
    Teacher:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Tokimahery Ramarozaka
        courses:
          type: array
          items:
            type: object
            properties:
              course_name:
                type: string
                enum:
                  - PROG1
                    PROG2
                    WEB1
                    DONNÃ‰ES1
              duration:
                type: string
                enum:
                  - 8h
                    12h
                    10h
                    6h
          required:
            - course_name
            - duration
      required:
        - name
        - courses